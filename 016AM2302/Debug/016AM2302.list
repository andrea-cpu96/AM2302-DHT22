
016AM2302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000658  08000660  00010660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000658  08000658  00010660  2**0
                  CONTENTS
  4 .ARM          00000000  08000658  08000658  00010660  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000658  08000660  00010660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000658  08000658  00010658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800065c  0800065c  0001065c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  08000660  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000660  00020058  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010660  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000087f  00000000  00000000  0001068a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005bb  00000000  00000000  00010f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  000114c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00011608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001258  00000000  00000000  000116d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c4d  00000000  00000000  00012928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003dd6  00000000  00000000  00014575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001834b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000278  00000000  00000000  0001839c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000640 	.word	0x08000640

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000640 	.word	0x08000640

08000204 <am2302_Read>:

uint32_t timeElapsed;


void am2302_Read(uint8_t *dataBuff)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

	start();
 800020c:	f000 f8ac 	bl	8000368 <start>

	while(Get_Port_Pin_State(DATA_PORT, DATA_PIN)); // Sensor pull down
 8000210:	bf00      	nop
 8000212:	2108      	movs	r1, #8
 8000214:	4824      	ldr	r0, [pc, #144]	; (80002a8 <am2302_Read+0xa4>)
 8000216:	f000 f8d7 	bl	80003c8 <Get_Port_Pin_State>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d1f8      	bne.n	8000212 <am2302_Read+0xe>

	while(!(Get_Port_Pin_State(DATA_PORT, DATA_PIN))); // Sensor pull up
 8000220:	bf00      	nop
 8000222:	2108      	movs	r1, #8
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <am2302_Read+0xa4>)
 8000226:	f000 f8cf 	bl	80003c8 <Get_Port_Pin_State>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d0f8      	beq.n	8000222 <am2302_Read+0x1e>

	// Sensor sends data

	while(Get_Port_Pin_State(DATA_PORT, DATA_PIN)); // Sensor pull down to start sending data
 8000230:	bf00      	nop
 8000232:	2108      	movs	r1, #8
 8000234:	481c      	ldr	r0, [pc, #112]	; (80002a8 <am2302_Read+0xa4>)
 8000236:	f000 f8c7 	bl	80003c8 <Get_Port_Pin_State>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f8      	bne.n	8000232 <am2302_Read+0x2e>

	int i = 39;
 8000240:	2327      	movs	r3, #39	; 0x27
 8000242:	60fb      	str	r3, [r7, #12]

	for( ; i >= 0 ; i--)
 8000244:	e027      	b.n	8000296 <am2302_Read+0x92>
	{

		while(!(Get_Port_Pin_State(DATA_PORT, DATA_PIN))); // Sensor pull up for data
 8000246:	bf00      	nop
 8000248:	2108      	movs	r1, #8
 800024a:	4817      	ldr	r0, [pc, #92]	; (80002a8 <am2302_Read+0xa4>)
 800024c:	f000 f8bc 	bl	80003c8 <Get_Port_Pin_State>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f8      	beq.n	8000248 <am2302_Read+0x44>

		timeElapsed = Get_SystemTimeUs();
 8000256:	f000 f97d 	bl	8000554 <Get_SystemTimeUs>
 800025a:	4603      	mov	r3, r0
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <am2302_Read+0xa8>)
 800025e:	6013      	str	r3, [r2, #0]

		while(Get_Port_Pin_State(DATA_PORT, DATA_PIN)); // Sensor pull down
 8000260:	bf00      	nop
 8000262:	2108      	movs	r1, #8
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <am2302_Read+0xa4>)
 8000266:	f000 f8af 	bl	80003c8 <Get_Port_Pin_State>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d1f8      	bne.n	8000262 <am2302_Read+0x5e>

		dataBuff[i] = (Compare_SystemTimeUs(timeElapsed) < 5) ? 0 : 1;
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <am2302_Read+0xa8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f977 	bl	8000568 <Compare_SystemTimeUs>
 800027a:	4603      	mov	r3, r0
 800027c:	2b04      	cmp	r3, #4
 800027e:	bf8c      	ite	hi
 8000280:	2301      	movhi	r3, #1
 8000282:	2300      	movls	r3, #0
 8000284:	b2d9      	uxtb	r1, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	460a      	mov	r2, r1
 800028e:	701a      	strb	r2, [r3, #0]
	for( ; i >= 0 ; i--)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3b01      	subs	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2b00      	cmp	r3, #0
 800029a:	dad4      	bge.n	8000246 <am2302_Read+0x42>

	}

}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020400 	.word	0x40020400
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <HardFault_Handler>:
#include <stdint.h>

#include "int.h"

void HardFault_Handler()
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	// Check the call stack
	// Check exception faults

	// Error loop

	while(1);
 80002b4:	e7fe      	b.n	80002b4 <HardFault_Handler+0x4>

080002b6 <SysTick_Handler>:

}

void SysTick_Handler(void)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	af00      	add	r7, sp, #0

	SysTick_CallBack();
 80002ba:	f000 f847 	bl	800034c <SysTick_CallBack>

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <main>:

uint16_t humyRawData = 0;


int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0

	// System configurations

	System_Config();
 80002ca:	f000 f8cf 	bl	800046c <System_Config>

	am2302PeriodtimeStamp = Get_SystemTimeUs();
 80002ce:	f000 f941 	bl	8000554 <Get_SystemTimeUs>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a19      	ldr	r2, [pc, #100]	; (800033c <main+0x78>)
 80002d6:	6013      	str	r3, [r2, #0]

	while(1)
	{

		if(Compare_SystemTimeUs(am2302PeriodtimeStamp) > AM2302_READ_PERIOD)
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <main+0x78>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f943 	bl	8000568 <Compare_SystemTimeUs>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a16      	ldr	r2, [pc, #88]	; (8000340 <main+0x7c>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d924      	bls.n	8000334 <main+0x70>
		{

			am2302_Read(data);
 80002ea:	4816      	ldr	r0, [pc, #88]	; (8000344 <main+0x80>)
 80002ec:	f7ff ff8a 	bl	8000204 <am2302_Read>

			for(uint8_t i = 0 ; i < 16 ; i++)
 80002f0:	2300      	movs	r3, #0
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	e016      	b.n	8000324 <main+0x60>
			{

				humyRawData |= ( data[39 - i] << ( 15 - i ) );
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 80002fc:	4a11      	ldr	r2, [pc, #68]	; (8000344 <main+0x80>)
 80002fe:	5cd3      	ldrb	r3, [r2, r3]
 8000300:	461a      	mov	r2, r3
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f1c3 030f 	rsb	r3, r3, #15
 8000308:	fa02 f303 	lsl.w	r3, r2, r3
 800030c:	b21a      	sxth	r2, r3
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <main+0x84>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b21b      	sxth	r3, r3
 8000314:	4313      	orrs	r3, r2
 8000316:	b21b      	sxth	r3, r3
 8000318:	b29a      	uxth	r2, r3
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <main+0x84>)
 800031c:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0 ; i < 16 ; i++)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	3301      	adds	r3, #1
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b0f      	cmp	r3, #15
 8000328:	d9e5      	bls.n	80002f6 <main+0x32>

			}

			am2302PeriodtimeStamp = Get_SystemTimeUs();
 800032a:	f000 f913 	bl	8000554 <Get_SystemTimeUs>
 800032e:	4603      	mov	r3, r0
 8000330:	4a02      	ldr	r2, [pc, #8]	; (800033c <main+0x78>)
 8000332:	6013      	str	r3, [r2, #0]

		}

		humyRawData = 0;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <main+0x84>)
 8000336:	2200      	movs	r2, #0
 8000338:	801a      	strh	r2, [r3, #0]
		if(Compare_SystemTimeUs(am2302PeriodtimeStamp) > AM2302_READ_PERIOD)
 800033a:	e7cd      	b.n	80002d8 <main+0x14>
 800033c:	20000048 	.word	0x20000048
 8000340:	000493e0 	.word	0x000493e0
 8000344:	20000020 	.word	0x20000020
 8000348:	2000004c 	.word	0x2000004c

0800034c <SysTick_CallBack>:
}



void SysTick_CallBack(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

	SysTickCountUs++;
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <SysTick_CallBack+0x18>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	4a03      	ldr	r2, [pc, #12]	; (8000364 <SysTick_CallBack+0x18>)
 8000358:	6013      	str	r3, [r2, #0]

}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000054 	.word	0x20000054

08000368 <start>:
#include "ports.h"

uint32_t timeStampAM2302 = 0;

void start(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0

	uint32_t *pGPIOMODER = (uint32_t *)0x40023800U;
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <start+0x54>)
 8000370:	607b      	str	r3, [r7, #4]

	// set as an Output

	*pGPIOMODER |= ( 0x1 << (8 * 2) ); // GPIOB_8 output mode
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	601a      	str	r2, [r3, #0]


	Port_Pin_Toggle(DATA_PORT, DATA_PIN);
 800037e:	2108      	movs	r1, #8
 8000380:	480f      	ldr	r0, [pc, #60]	; (80003c0 <start+0x58>)
 8000382:	f000 f83f 	bl	8000404 <Port_Pin_Toggle>

	timeStampAM2302 = Get_SystemTimeUs();
 8000386:	f000 f8e5 	bl	8000554 <Get_SystemTimeUs>
 800038a:	4603      	mov	r3, r0
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <start+0x5c>)
 800038e:	6013      	str	r3, [r2, #0]

	while(Compare_SystemTimeUs(timeStampAM2302) < 200); // 2Ms delay
 8000390:	bf00      	nop
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <start+0x5c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f8e6 	bl	8000568 <Compare_SystemTimeUs>
 800039c:	4603      	mov	r3, r0
 800039e:	2bc7      	cmp	r3, #199	; 0xc7
 80003a0:	d9f7      	bls.n	8000392 <start+0x2a>

	Port_Pin_Toggle(DATA_PORT, DATA_PIN);
 80003a2:	2108      	movs	r1, #8
 80003a4:	4806      	ldr	r0, [pc, #24]	; (80003c0 <start+0x58>)
 80003a6:	f000 f82d 	bl	8000404 <Port_Pin_Toggle>

	// set as an input

	*pGPIOMODER &= ~( 0x00 << (8 * 2) ); // GPIOB_8 input mode
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	601a      	str	r2, [r3, #0]

}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020400 	.word	0x40020400
 80003c4:	20000050 	.word	0x20000050

080003c8 <Get_Port_Pin_State>:
#include "ports.h"



uint8_t Get_Port_Pin_State(uint32_t port, uint8_t pin)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]

	uint8_t ret = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	73fb      	strb	r3, [r7, #15]

	// Read IDR

	uint32_t *pGPIOXIDR = (uint32_t *)( (uint32_t)port + (uint32_t)0x10 );
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3310      	adds	r3, #16
 80003dc:	60bb      	str	r3, [r7, #8]

	ret = ( ( *pGPIOXIDR  & (1 << pin) ) > 0 ) ? 1 : 0;
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	78fa      	ldrb	r2, [r7, #3]
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	4013      	ands	r3, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	bf14      	ite	ne
 80003f0:	2301      	movne	r3, #1
 80003f2:	2300      	moveq	r3, #0
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	73fb      	strb	r3, [r7, #15]

	return ret;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]

}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <Port_Pin_Toggle>:


void Port_Pin_Toggle(uint32_t port, uint8_t pin)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]

	uint8_t pinState = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	73fb      	strb	r3, [r7, #15]

	// Write ODR

	uint32_t *pGPIOXODR = (uint32_t *)( (uint32_t)port + (uint32_t)0x14 );
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3314      	adds	r3, #20
 8000418:	60bb      	str	r3, [r7, #8]

	pinState = ( *pGPIOXODR & (1 << pin) ) > 0 ? 1 : 0;
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	78fa      	ldrb	r2, [r7, #3]
 8000420:	2101      	movs	r1, #1
 8000422:	fa01 f202 	lsl.w	r2, r1, r2
 8000426:	4013      	ands	r3, r2
 8000428:	2b00      	cmp	r3, #0
 800042a:	bf14      	ite	ne
 800042c:	2301      	movne	r3, #1
 800042e:	2300      	moveq	r3, #0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	73fb      	strb	r3, [r7, #15]

	if(pinState == 0)
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d109      	bne.n	800044e <Port_Pin_Toggle+0x4a>
		*pGPIOXODR |= ( 1 << pin );
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	78fa      	ldrb	r2, [r7, #3]
 8000440:	2101      	movs	r1, #1
 8000442:	fa01 f202 	lsl.w	r2, r1, r2
 8000446:	431a      	orrs	r2, r3
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	601a      	str	r2, [r3, #0]
	else
		*pGPIOXODR &= ~( 1 << pin );

}
 800044c:	e009      	b.n	8000462 <Port_Pin_Toggle+0x5e>
		*pGPIOXODR &= ~( 1 << pin );
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	78fa      	ldrb	r2, [r7, #3]
 8000454:	2101      	movs	r1, #1
 8000456:	fa01 f202 	lsl.w	r2, r1, r2
 800045a:	43d2      	mvns	r2, r2
 800045c:	401a      	ands	r2, r3
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <System_Config>:
 * processor peripherals configuration;
 * port configurations;
 *
*/
void System_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

	systemClock_Init();
 8000470:	f000 f86a 	bl	8000548 <systemClock_Init>

	SysTick_Init();
 8000474:	f000 f804 	bl	8000480 <SysTick_Init>

	port_Init();
 8000478:	f000 f826 	bl	80004c8 <port_Init>

}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <SysTick_Init>:


void SysTick_Init(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0

	uint32_t *pSysTickCSR  = (uint32_t *)0xE000E010U;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <SysTick_Init+0x40>)
 8000488:	60fb      	str	r3, [r7, #12]

	// [2] internal clock source ; [1] enable SysTick exception ; [0] enable counter

	*pSysTickCSR |= (7 << 0);
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f043 0207 	orr.w	r2, r3, #7
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	601a      	str	r2, [r3, #0]

	// Reload value
	// 10us

	uint32_t reload = 160 - 1; // 16Mhz [system clock] * 10us [Systick exception]
 8000496:	239f      	movs	r3, #159	; 0x9f
 8000498:	60bb      	str	r3, [r7, #8]

	uint32_t *pSysTickRVR = (uint32_t *)0xE000E014U;
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <SysTick_Init+0x44>)
 800049c:	607b      	str	r3, [r7, #4]

	*pSysTickRVR &= ~(0x00FFFFFF); // Clear
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	601a      	str	r2, [r3, #0]
	*pSysTickRVR |= (reload); // Set
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	431a      	orrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	601a      	str	r2, [r3, #0]

}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	e000e010 	.word	0xe000e010
 80004c4:	e000e014 	.word	0xe000e014

080004c8 <port_Init>:


void port_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
	// PIN_8 -> Output AM2302 sensor
	//

	// Enable clock

	uint32_t *RCCBaseAddr = (uint32_t *)0x40023800U;
 80004ce:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <port_Init+0x78>)
 80004d0:	61fb      	str	r3, [r7, #28]

	uint32_t *pRCCAHB1ENR = (uint32_t *)( (uint32_t)RCCBaseAddr + (uint32_t)0x30U );
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	3330      	adds	r3, #48	; 0x30
 80004d6:	61bb      	str	r3, [r7, #24]

	*pRCCAHB1ENR |= (1 << 1);
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f043 0202 	orr.w	r2, r3, #2
 80004e0:	69bb      	ldr	r3, [r7, #24]
 80004e2:	601a      	str	r2, [r3, #0]

	// By default it is zero, we need to pull-up the port

	Port_Pin_Toggle(DATA_PORT, DATA_PIN);
 80004e4:	2108      	movs	r1, #8
 80004e6:	4817      	ldr	r0, [pc, #92]	; (8000544 <port_Init+0x7c>)
 80004e8:	f7ff ff8c 	bl	8000404 <Port_Pin_Toggle>

	// PIN_8 configuration

	uint32_t *pGPIOBBaseAddr = (uint32_t *)0x40020400U;
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <port_Init+0x7c>)
 80004ee:	617b      	str	r3, [r7, #20]

	// MODER

	uint32_t *pGPIOMODER = (uint32_t *)( (uint32_t)pGPIOBBaseAddr + (uint32_t)0x00U );
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	613b      	str	r3, [r7, #16]

	*pGPIOMODER |= ( 0x1 << (8 * 2) ); // GPIOB_8 output mode
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	601a      	str	r2, [r3, #0]


	// OTYPER

	uint32_t *pGPIOOTYPER = (uint32_t *)( (uint32_t)pGPIOBBaseAddr + (uint32_t)0x04U );
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	3304      	adds	r3, #4
 8000504:	60fb      	str	r3, [r7, #12]

	*pGPIOOTYPER |= ( 0x1 << 8 ); // GPIOB_8 open-drain
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	601a      	str	r2, [r3, #0]


	// PULLUP

	uint32_t *pGPIOPUPDR = (uint32_t *)( (uint32_t)pGPIOBBaseAddr + (uint32_t)0x0CU );
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	330c      	adds	r3, #12
 8000516:	60bb      	str	r3, [r7, #8]

	*pGPIOPUPDR |= ( 0x1 << (8 * 2) ); // GPIOB_8 PULL up
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	601a      	str	r2, [r3, #0]

	// SPEED

	uint32_t *pGPIOOSPEEDR = (uint32_t *)( (uint32_t)pGPIOBBaseAddr + (uint32_t)0x08U );
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	3308      	adds	r3, #8
 8000528:	607b      	str	r3, [r7, #4]

	*pGPIOOSPEEDR |= ( 0x3 << (8 * 2) ); // GPIOB_8 speed
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]

}
 8000536:	bf00      	nop
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800
 8000544:	40020400 	.word	0x40020400

08000548 <systemClock_Init>:


void systemClock_Init(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	uint32_t *pRCCCFGR = (uint32_t *)( (uint32_t)pRCCBaseAddr + (uint32_t)0x08U );

	*pRCCCFGR |= ( 0x02 << 2 );
	*/

}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <Get_SystemTimeUs>:
*
* Get SysTicCount
*
*/
uint32_t Get_SystemTimeUs(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

	return SysTickCountUs;
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <Get_SystemTimeUs+0x10>)
 800055a:	681b      	ldr	r3, [r3, #0]

}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20000054 	.word	0x20000054

08000568 <Compare_SystemTimeUs>:
*
* Compare captured value with actual
*
*/
uint32_t Compare_SystemTimeUs(uint32_t capturedTimeUs)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

	uint32_t ret = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]

	if(SysTickCountUs >= capturedTimeUs)
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <Compare_SystemTimeUs+0x38>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	429a      	cmp	r2, r3
 800057c:	d805      	bhi.n	800058a <Compare_SystemTimeUs+0x22>
		ret = SysTickCountUs - capturedTimeUs;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <Compare_SystemTimeUs+0x38>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e004      	b.n	8000594 <Compare_SystemTimeUs+0x2c>
	else
		ret = capturedTimeUs - SysTickCountUs;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <Compare_SystemTimeUs+0x38>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	60fb      	str	r3, [r7, #12]

	return ret;
 8000594:	68fb      	ldr	r3, [r7, #12]

}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	20000054 	.word	0x20000054

080005a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ae:	490d      	ldr	r1, [pc, #52]	; (80005e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <LoopForever+0xe>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c4:	4c0a      	ldr	r4, [pc, #40]	; (80005f0 <LoopForever+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d2:	f000 f811 	bl	80005f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff fe75 	bl	80002c4 <main>

080005da <LoopForever>:

LoopForever:
    b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   r0, =_estack
 80005dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005e8:	08000660 	.word	0x08000660
  ldr r2, =_sbss
 80005ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005f0:	20000058 	.word	0x20000058

080005f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC_IRQHandler>
	...

080005f8 <__libc_init_array>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	4d0d      	ldr	r5, [pc, #52]	; (8000630 <__libc_init_array+0x38>)
 80005fc:	4c0d      	ldr	r4, [pc, #52]	; (8000634 <__libc_init_array+0x3c>)
 80005fe:	1b64      	subs	r4, r4, r5
 8000600:	10a4      	asrs	r4, r4, #2
 8000602:	2600      	movs	r6, #0
 8000604:	42a6      	cmp	r6, r4
 8000606:	d109      	bne.n	800061c <__libc_init_array+0x24>
 8000608:	4d0b      	ldr	r5, [pc, #44]	; (8000638 <__libc_init_array+0x40>)
 800060a:	4c0c      	ldr	r4, [pc, #48]	; (800063c <__libc_init_array+0x44>)
 800060c:	f000 f818 	bl	8000640 <_init>
 8000610:	1b64      	subs	r4, r4, r5
 8000612:	10a4      	asrs	r4, r4, #2
 8000614:	2600      	movs	r6, #0
 8000616:	42a6      	cmp	r6, r4
 8000618:	d105      	bne.n	8000626 <__libc_init_array+0x2e>
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000620:	4798      	blx	r3
 8000622:	3601      	adds	r6, #1
 8000624:	e7ee      	b.n	8000604 <__libc_init_array+0xc>
 8000626:	f855 3b04 	ldr.w	r3, [r5], #4
 800062a:	4798      	blx	r3
 800062c:	3601      	adds	r6, #1
 800062e:	e7f2      	b.n	8000616 <__libc_init_array+0x1e>
 8000630:	08000658 	.word	0x08000658
 8000634:	08000658 	.word	0x08000658
 8000638:	08000658 	.word	0x08000658
 800063c:	0800065c 	.word	0x0800065c

08000640 <_init>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	bf00      	nop
 8000644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000646:	bc08      	pop	{r3}
 8000648:	469e      	mov	lr, r3
 800064a:	4770      	bx	lr

0800064c <_fini>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr
